# KC Winners API Documentation

Base URL: `https://localhost:3000/api/v1`

All protected routes require an `Authorization: Bearer <token>` header.



üîë  AUTH ROUTES (/api/v1/auth)

# Authentication & account activation.

--- POST /api/v1/auth/sign-up
To Register a new user.

# request body: 
{
    name,
    email,
    phone,
    password
}


--- POST /api/v1/auth/login 
Authenticate user and return token.

# request body: 
{
    phone,
    password
}

--- POST /api/v1/auth/activate {protected}
Activate user account with extra profile fields and registration proof.
Form-Data:

# request body: 
{
    userId (optional)
    sex,
    bankName,
    accountNumber,
    residentialAddress,
    nextOfKinName,
    nextOfKinPhone,
    nextOfKinAddress,
    registraionProof
}

--- POST /api/v1/auth/update-profile
Update user profile

# request body:
{
    sex,
    accountName,
    accountNumber,
    residentialAddress,
    nextOfKinName,
    nextOfKinPhone,
    nextOfKinAddress,
}

--- POST /api/v1/auth/forgot-password

# request body
{
    phone
}


--- POST /api/v1/auth/verify-otp

# request body:
{ 
    phone, 
    pin, 
    pinId 
}

--- POST /api/v1/auth/reset-password

# request body
{
    phone,
    newPassword
}


--- PATCH /api/v1/auth/update-profile

# request body
{
    sex,
    accountName,
    accountNumber,
    residentialAddress,
    nextOfKinName,
    nextOfKinPhone,
    nextOfKinAddress,
}


--- PATCH /api/v1/auth/change-password

# request body
{
    oldPassowrd
    newPassword
}





üëë ADMIN ROUTES (/api/v1/admin)

# Admin-only functions. 

--- POST /api/v1/admin/login
Admin Login
# request body
{
    email
    password
} = req.body

--- GET /api/v1/admin/pending-registrations
Get list of users awaiting approval.

const users = await User.find({ isVerified: false })


--- POST /api/v1/admin/approve-registration/:userId
Approve a user‚Äôs registration.
# request body
{
    userId
} = req.params


--- GET /api/v1/admin/users
to get list of all users,

--- GET /api/v1/admin/cleared-users
List of users who cleared defaults and paid clearance.

const clearedAccounts = await ContributionAccount.find({ status: "eligible_for_withdrawal" })


--- POST /api/v1/admin/account-paid
Approve a user‚Äôs registration.
# request body
{
    userId
    accountId
} = req.body


--- GET /api/v1/admin/profile
List of users who cleared defaults and paid clearance.




üí∞ CONTRIBUTION ROUTES (/api/contributions)

# Handles user contributions. All routes are protected

--- POST /api/v1/contributions/create
Create a new contribution account.

# Request body
{
    userId
    referral code
}

--- GET /api/v1/contributions/:userId
Get all contributions for a user.

--- GET /api/v1/contributions/detail/:id
Get details of a single contribution account.

--- POST /api/v1/contributions/clear-defaults
Clear missed contributions (defaulter payment).

--- POST /api/v1/contributions/pay-clearance
Pay clearance fee (before withdrawal).





üë§ USER ROUTES (/api/users)

# Get user info.

--- GET /api/users/:id {protected}
Fetch single user by ID.





üíµ Wallet Routes (/api/v1/wallet)

# Wallet funding & tracking.

--- POST /api/v1/wallet/fund-initiate
Initiate a transfer to fund wallet.

# request body
{
    amount
}
# What it does:
Takes an amount from the frontend.
Finds the logged-in user (req.user._id) and prepares a payment payload for Squad.
Creates a pending transaction record in your database with a unique reference (uuidv4).
Calls Squad‚Äôs initiate transaction API, and Squad responds with a checkoutUrl.
Returns that checkoutUrl to the frontend.

# Frontend connection:
When the user clicks ‚ÄúFund Wallet‚Äù, this endpoint is called with { amount }.
The frontend receives a checkoutUrl from squad and is to redirect the user there to complete payment.



--- POST /api/v1/wallet/fund-verify
Handle webhook for automatic wallet funding
# What it does:
After Squad redirects back (via callback_url), the backend hits this endpoint with the transaction reference.
Calls Squad‚Äôs verify API to check if payment was successful.
If success:
    Finds the matching transaction record.
    Updates the user‚Äôs wallet balance in WalletFund.
    Marks the transaction status as success.
    If failed ‚Üí marks it as failed.

# Frontend connection:
After the user pays, your frontend should call /wallet/fund-verify?reference=xyz.
This will confirm if money landed, and you can show ‚ÄúWallet funded successfully‚Äù.




--- POST /api/v1/wallet/webhook
Initiate a transfer to fund wallet.
# What it does:
This is server-to-server communication from Squad.
When a payment succeeds, Squad calls your webhook with event details.
You extract the userId (stored in metadata during initiation) and credit the wallet automatically.
Returns 200 to acknowledge receipt.

# Frontend connection:
None directly.
This runs in the background even if the user closes the browser.
It ensures payments are never lost if verifyFunding isn‚Äôt called.



--- POST /api/v1/wallet/transactions 
Handle webhook for automatic wallet funding

--- POST /api/v1/wallet/revenue/monthly 
Handle webhook for automatic wallet funding



Contact Routes (/api/v1/contact)
# sends the contact form to their hostinger mail and gmail account
